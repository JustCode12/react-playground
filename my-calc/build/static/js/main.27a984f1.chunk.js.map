{"version":3,"sources":["components/CalculationProvider.js","components/keyPad.js","components/result.js","App.js","serviceWorker.js","index.js"],"names":["CalculationContext","React","createContext","CalculationProvider","props","useState","result","setResult","calculate","expression","eval","Provider","value","children","KeyPad","setExpression","useContext","onClick","e","clicked","target","name","length","Result","console","log","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iiBAEaA,mBAAqBC,6CAAMC,gBAElCC,oBAAsB,SAAtBA,oBAAsBC,OAAU,IAAD,UACPC,oDAAS,GADF,kKAC5BC,OAD4B,cACpBC,UADoB,cAG7BC,UAAY,SAAZA,UAAYC,YACdF,UAAUG,KAAKD,cAGnB,OACE,2DAACT,mBAAmBW,SAApB,CACEC,MAAO,CACLJ,oBACAF,gBAGDF,MAAMS,WAKEV,2C,gLCiCAW,EApDC,WAAO,IAAD,EAEkBT,mBAAS,IAF3B,mBAEXI,EAFW,KAECM,EAFD,KAGXP,EAAaQ,qBAAWhB,KAAxBQ,UAEDS,EAAU,SAAAC,GACZ,IAAMC,EAAUD,EAAEE,OAAOC,KACtBZ,EAAWa,OAAO,GAAa,MAAVH,GACpBX,EAAUC,GACVM,EAAc,KAGlBA,EAAcN,EAAaU,IAG/B,OACA,6BAAK,wCAAoBV,EACvB,6BACU,4BAAQY,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,KAAKJ,QAASA,GAA3B,MACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KAA6C,6BAG7C,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KAA6C,6BAG7C,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KAA6C,6BAE7C,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KAA6C,6BAG7C,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,KACA,4BAAQI,KAAK,IAAIJ,QAASA,GAA1B,QAA6C,gCCtC9CM,EAPA,WAAO,IACXjB,EAAUU,qBAAWhB,KAArBM,OAEP,OADAkB,QAAQC,IAAI,aAAcnB,GAEtB,6BAAK,0CAAsBA,ICYpBoB,MAZf,WAEE,OACE,yBAAKC,UAAU,OACb,kBAACxB,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27a984f1.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const CalculationContext = React.createContext();\n\nconst CalculationProvider = props => {\n  const [result, setResult] = useState(0);\n\n  const calculate = expression =>{\n      setResult(eval(expression))\n  }\n\n  return (\n    <CalculationContext.Provider\n      value={{\n        calculate,\n        result\n      }}\n    >\n      {props.children}\n    </CalculationContext.Provider>\n  );\n};\n\nexport default CalculationProvider;","import React, {useState, useContext} from 'react';\n//import { calculate } from './calculations'\nimport { CalculationContext } from './CalculationProvider';\n\nconst  KeyPad = () => {\n\n    const [expression, setExpression] = useState(\"\")\n    const {calculate} = useContext(CalculationContext);\n\n    const onClick = e => {\n        const clicked = e.target.name;\n        if(expression.length>0&&clicked===\"=\"){\n            calculate(expression)\n            setExpression(\"\")\n        }\n        else{\n        setExpression(expression + clicked); \n        }\n    }\n    return (\n    <div><span>Data: </span>{expression}\n      <div>\n                <button name=\"(\" onClick={onClick}>(</button>\n                <button name=\"CE\" onClick={onClick}>CE</button>\n                <button name=\")\" onClick={onClick}>)</button>\n                <button name=\"C\" onClick={onClick}>C</button><br/>\n\n\n                <button name=\"1\" onClick={onClick}>1</button>\n                <button name=\"2\" onClick={onClick}>2</button>\n                <button name=\"3\" onClick={onClick}>3</button>\n                <button name=\"+\" onClick={onClick}>+</button><br/>\n\n\n                <button name=\"4\" onClick={onClick}>4</button>\n                <button name=\"5\" onClick={onClick}>5</button>\n                <button name=\"6\" onClick={onClick}>6</button>\n                <button name=\"-\" onClick={onClick}>-</button><br/>\n\n                <button name=\"7\" onClick={onClick}>7</button>\n                <button name=\"8\" onClick={onClick}>8</button>\n                <button name=\"9\" onClick={onClick}>9</button>\n                <button name=\"*\" onClick={onClick}>x</button><br/>\n\n\n                <button name=\".\" onClick={onClick}>.</button>\n                <button name=\"0\" onClick={onClick}>0</button>\n                <button name=\"=\" onClick={onClick}>=</button>\n                <button name=\"/\" onClick={onClick}>รท</button><br/>\n            </div>\n    </div>\n    \n    );\n\n}\n\nexport default KeyPad;","import React, { useContext } from 'react';\nimport { CalculationContext } from './CalculationProvider';\n\nconst Result = () => {\n    const {result} = useContext(CalculationContext);\n    console.log(\"kalkulacja\", result)\n    return (\n        <div><span>Result: </span>{result}</div>\n    )\n}\nexport default Result;\n\n","import React from 'react';\nimport './App.css';\n\nimport  KeyPad  from './components/keyPad';\nimport  Result  from './components/result';\nimport CalculationProvider from './components/CalculationProvider';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <CalculationProvider>\n        <Result />\n        <KeyPad />       \n      </CalculationProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}